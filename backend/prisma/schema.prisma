// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ParcelStatus {
  PENDING
  IN_TRANSIT
  DELIVERED
  CANCELLED
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  phone           String
  role            Role      @default(USER)
  parcelsSent     Parcel[]  @relation("SentParcels")
  parcelsReceived Parcel[]  @relation("ReceivedParcels")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? // Soft delete
  resetCode        String?
  resetCodeExpiry  DateTime?
}

model Parcel {
  id             String      @id @default(uuid())
  senderId       String
  receiverId     String
  sender         User        @relation("SentParcels", fields: [senderId], references: [id])
  receiver       User        @relation("ReceivedParcels", fields: [receiverId], references: [id])
  status         ParcelStatus @default(PENDING)
  pickupLocation String
  destination    String
  pricing        Float
  trackingNumber String      @unique
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  deletedAt      DateTime?   // Soft delete
  trackingSteps  ParcelTrackingStep[]
}

model ParcelTrackingStep {
  id        String   @id @default(uuid())
  parcel    Parcel   @relation(fields: [parcelId], references: [id])
  parcelId  String
  status    String
  location  String
  lat       Float
  lng       Float
  timestamp DateTime @default(now())
}
